#!/usr/bin/env bash
#
# Summary: Install a Python version using nix
#
# Usage: pyenv nix-install [-f] [-kv] <version>...
#        pyenv nix-install -l|--list
#        pyenv nix-install -q|--query <version>
#
#   -l/--list          List all available versions
#   -q/--query         Search for available versions
#   -f/--force         Install even if the version appears to be installed already
#   -s/--skip-existing Skip if the version appears to be installed already
#
#   python-build options:
#
#   -v/--verbose       Verbose mode: print compilation status to stdout
#   --version          Show version of python-build
#   -g/--debug         Build a debug version
#
set -e
[ -n "$PYENV_DEBUG" ] && set -x

# Provide pyenv completions
if [ "$1" = "--complete" ]; then
  echo --list
  echo --query
  echo --force
  echo --skip-existing
  echo --verbose
  echo --version
  echo --debug
fi

# Load shared library functions
eval "$(python-build --lib)"

usage() {
  pyenv-help install 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

definitions() {
  local query="packages.*$1"
  local grep_cmd=$(type -P rg ggrep grep | head -n1)
  nix search github:cachix/nixpkgs-python ".*" \
    | $grep_cmd --color="never" "$query" \
    || true
}

indent() {
  sed 's/\*/ /'
}

unset FORCE
unset SKIP_EXISTING
unset VERBOSE
unset DEBUG

[ -n "$PYENV_DEBUG" ] && VERBOSE="-v"

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage 0
    ;;
  "l" | "list" )
    echo "Available versions:"
    definitions | indent
    exit
    ;;
  "q" | "query" )
    query="${ARGUMENTS[0]}"
    versions="$(definitions "$query")"
    if [ -z "$versions" ]; then
      echo "No versions found for query: $query"
      exit 1
    fi
    echo "$versions" | indent
    exit
    ;;
  "f" | "force" )
    FORCE=true
    ;;
  "s" | "skip-existing" )
    SKIP_EXISTING=true
    ;;
  "v" | "verbose" )
    VERBOSE="-v"
    ;;
  "g" | "debug" )
    DEBUG="-g"
    ;;
  * )
    usage 1 >&2
    ;;
  esac
done

unset VERSION_NAME

# The first argument contains the definition to install. If the
# argument is missing, try to install whatever local app-specific
# version is specified by pyenv. Show usage instructions if a local
# version is not specified.
DEFINITIONS=("${ARGUMENTS[@]}")
[[ "${#DEFINITIONS[*]}" -eq 0 ]] && DEFINITIONS=($(pyenv-local 2>/dev/null || true))
[[ "${#DEFINITIONS[*]}" -eq 0 ]] && usage 1 >&2

# Define `before_install` and `after_install` functions that allow
# plugin hooks to register a string of code for execution before or
# after the installation process.
declare -a before_hooks after_hooks

before_install() {
  local hook="$1"
  before_hooks["${#before_hooks[@]}"]="$hook"
}

after_install() {
  local hook="$1"
  after_hooks["${#after_hooks[@]}"]="$hook"
}

# Plan cleanup on unsuccessful installation.
cleanup() {
  [ -z "${PREFIX_EXISTS}" ] && rm -rf "$PREFIX"
}

trap cleanup SIGINT


OLDIFS="$IFS"
IFS=$'\n' scripts=(`pyenv-hooks install`)
IFS="$OLDIFS"
for script in "${scripts[@]}"; do source "$script"; done

COMBINED_STATUS=0
for DEFINITION in "${DEFINITIONS[@]}"; do
  STATUS=0

  # Try to resolve a prefix if user indeed gave a prefix.
  # We install the version under the resolved name
  # and hooks also see the resolved name
  # TODO: Fix this, for nix-install this does not always give the newest available version
  DEFINITION="$(pyenv-latest -f -k "$DEFINITION")"

  # Set VERSION_NAME from $DEFINITION. Then compute the installation prefix.
  VERSION_NAME="${DEFINITION##*/}"
  [ -n "$DEBUG" ] && VERSION_NAME="${VERSION_NAME}-debug"
  PREFIX="${PYENV_ROOT}/versions/${VERSION_NAME}"

  [ -d "${PREFIX}" ] && PREFIX_EXISTS=1

  # If the installation prefix exists, prompt for confirmation unless
  # the --force option was specified.
  if [ -d "${PREFIX}/bin" ]; then
    if [ -z "$FORCE" ] && [ -z "$SKIP_EXISTING" ]; then
      echo "pyenv: $PREFIX already exists" >&2
      read -p "continue with installation? (y/N) "

      case "$REPLY" in
      y | Y | yes | YES ) ;;
      * ) { STATUS=1; [[ $STATUS -gt $COMBINED_STATUS ]] && COMBINED_STATUS=$STATUS; }; continue ;;
      esac
    elif [ -n "$SKIP_EXISTING" ]; then
      # Since we know the python version is already installed, and are opting to
      # not force installation of existing versions, we just `exit 0` here to
      # leave things happy
      continue
    fi
  fi

  FLAKE_PROVIDER="github:cachix/nixpkgs-python"

  # Execute `before_install` hooks.
  for hook in "${before_hooks[@]}"; do eval "$hook"; done

  echo "pyenv: Installing ${DEFINITION} with nix..."

  # Invoke `nix build` and record the exit status in $STATUS.
  nix build --out-link "${PREFIX}" "${FLAKE_PROVIDER}#\"${DEFINITION}\"" || \
      { STATUS=$?; [[ $STATUS -gt $COMBINED_STATUS ]] && COMBINED_STATUS=$STATUS; }

  # Display a more helpful message if the definition wasn't found.
  if [ "$STATUS" == "2" ]; then
    { candidates="$(definitions "$DEFINITION")"
      here="$(dirname "${0%/*}")/../.."
      if [ -n "$candidates" ]; then
        echo
        echo "The following versions contain \`$DEFINITION' in the name:"
        echo "$candidates" | indent
      fi
      echo
      echo -n "See all available versions with \`pyenv nix-install --list'."
    } >&2
  fi

  # Execute `after_install` hooks.
  for hook in "${after_hooks[@]}"; do eval "$hook"; done

  # Run `pyenv-rehash` after a successful installation.
  if [[ $STATUS -eq 0 ]]; then
    pyenv-rehash
  else
    cleanup
    break
  fi

done


exit "${COMBINED_STATUS}"
